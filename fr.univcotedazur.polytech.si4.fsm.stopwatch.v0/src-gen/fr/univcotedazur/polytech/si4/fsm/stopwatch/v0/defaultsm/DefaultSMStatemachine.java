/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.stopwatch.v0.defaultsm;

import fr.univcotedazur.polytech.si4.fsm.stopwatch.v0.ITimer;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class DefaultSMStatemachine implements IDefaultSMStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private boolean leftB;
		
		
		public void raiseLeftB() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							leftB = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean rightB;
		
		
		public void raiseRightB() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							rightB = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean middleB;
		
		
		public void raiseMiddleB() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							middleB = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean recodeB;
		
		
		public void raiseRecodeB() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							recodeB = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean doStart;
		
		
		public boolean isRaisedDoStart() {
			synchronized(DefaultSMStatemachine.this) {
				return doStart;
			}
		}
		
		protected void raiseDoStart() {
			synchronized(DefaultSMStatemachine.this) {
				doStart = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoStartRaised();
				}
			}
		}
		
		private boolean doStop;
		
		
		public boolean isRaisedDoStop() {
			synchronized(DefaultSMStatemachine.this) {
				return doStop;
			}
		}
		
		protected void raiseDoStop() {
			synchronized(DefaultSMStatemachine.this) {
				doStop = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoStopRaised();
				}
			}
		}
		
		private boolean doPause;
		
		
		public boolean isRaisedDoPause() {
			synchronized(DefaultSMStatemachine.this) {
				return doPause;
			}
		}
		
		protected void raiseDoPause() {
			synchronized(DefaultSMStatemachine.this) {
				doPause = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoPauseRaised();
				}
			}
		}
		
		private boolean init;
		
		
		public boolean isRaisedInit() {
			synchronized(DefaultSMStatemachine.this) {
				return init;
			}
		}
		
		protected void raiseInit() {
			synchronized(DefaultSMStatemachine.this) {
				init = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onInitRaised();
				}
			}
		}
		
		private boolean showTime;
		
		
		public boolean isRaisedShowTime() {
			synchronized(DefaultSMStatemachine.this) {
				return showTime;
			}
		}
		
		protected void raiseShowTime() {
			synchronized(DefaultSMStatemachine.this) {
				showTime = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onShowTimeRaised();
				}
			}
		}
		
		private boolean showDate;
		
		
		public boolean isRaisedShowDate() {
			synchronized(DefaultSMStatemachine.this) {
				return showDate;
			}
		}
		
		protected void raiseShowDate() {
			synchronized(DefaultSMStatemachine.this) {
				showDate = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onShowDateRaised();
				}
			}
		}
		
		private boolean recodeTime;
		
		
		public boolean isRaisedRecodeTime() {
			synchronized(DefaultSMStatemachine.this) {
				return recodeTime;
			}
		}
		
		protected void raiseRecodeTime() {
			synchronized(DefaultSMStatemachine.this) {
				recodeTime = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onRecodeTimeRaised();
				}
			}
		}
		
		private boolean doReset;
		
		
		public boolean isRaisedDoReset() {
			synchronized(DefaultSMStatemachine.this) {
				return doReset;
			}
		}
		
		protected void raiseDoReset() {
			synchronized(DefaultSMStatemachine.this) {
				doReset = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoResetRaised();
				}
			}
		}
		
		protected void clearEvents() {
			leftB = false;
			rightB = false;
			middleB = false;
			recodeB = false;
		}
		protected void clearOutEvents() {
		
		doStart = false;
		doStop = false;
		doPause = false;
		init = false;
		showTime = false;
		showDate = false;
		recodeTime = false;
		doReset = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		time_stopWatch,
		time_stopWatch_r1_init,
		time_stopWatch_r1_stop,
		time_stopWatch_r1_pause,
		time_stopWatch_r1_run,
		time_time_date,
		time_time_date_r2_time,
		time_time_date_r2_date,
		recodeTime_recodeTime,
		recodeTime_doNothing,
		$NullState$
	};
	
	private State[] historyVector = new State[1];
	private final State[] stateVector = new State[2];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[3];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isRunningCycle = false;
	public DefaultSMStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NullState$;
		}
		for (int i = 0; i < 1; i++) {
			historyVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_time_default();
		enterSequence_recodeTime_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		
		if (isRunningCycle) {
			return;
		}
		isRunningCycle = true;
		
		clearOutEvents();
	
		Runnable task = getNextEvent();
		if (task == null) {
			task = getDefaultEvent();
		}
		
		while (task != null) {
			task.run();
			clearEvents();
			task = getNextEvent();
		}
		
		isRunningCycle = false;
	}
	
	protected synchronized void singleCycle() {
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case time_stopWatch_r1_init:
				time_stopWatch_r1_init_react(true);
				break;
			case time_stopWatch_r1_stop:
				time_stopWatch_r1_stop_react(true);
				break;
			case time_stopWatch_r1_pause:
				time_stopWatch_r1_pause_react(true);
				break;
			case time_stopWatch_r1_run:
				time_stopWatch_r1_run_react(true);
				break;
			case time_time_date_r2_time:
				time_time_date_r2_time_react(true);
				break;
			case time_time_date_r2_date:
				time_time_date_r2_date_react(true);
				break;
			case recodeTime_recodeTime:
				recodeTime_recodeTime_react(true);
				break;
			case recodeTime_doNothing:
				recodeTime_doNothing_react(true);
				break;
			default:
				// $NullState$
			}
		}
	}
	
	protected Runnable getNextEvent() {
		if(!inEventQueue.isEmpty()) {
			return inEventQueue.poll();
		}
		return null;
	}
	
	protected Runnable getDefaultEvent() {
		return new Runnable() {
			@Override
			public void run() {
				singleCycle();
			}
		};
	}
	
	public synchronized void exit() {
		exitSequence_time();
		exitSequence_recodeTime();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case time_stopWatch:
			return stateVector[0].ordinal() >= State.
					time_stopWatch.ordinal()&& stateVector[0].ordinal() <= State.time_stopWatch_r1_run.ordinal();
		case time_stopWatch_r1_init:
			return stateVector[0] == State.time_stopWatch_r1_init;
		case time_stopWatch_r1_stop:
			return stateVector[0] == State.time_stopWatch_r1_stop;
		case time_stopWatch_r1_pause:
			return stateVector[0] == State.time_stopWatch_r1_pause;
		case time_stopWatch_r1_run:
			return stateVector[0] == State.time_stopWatch_r1_run;
		case time_time_date:
			return stateVector[0].ordinal() >= State.
					time_time_date.ordinal()&& stateVector[0].ordinal() <= State.time_time_date_r2_date.ordinal();
		case time_time_date_r2_time:
			return stateVector[0] == State.time_time_date_r2_time;
		case time_time_date_r2_date:
			return stateVector[0] == State.time_time_date_r2_date;
		case recodeTime_recodeTime:
			return stateVector[1] == State.recodeTime_recodeTime;
		case recodeTime_doNothing:
			return stateVector[1] == State.recodeTime_doNothing;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
				singleCycle();
			}
		});
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public synchronized void raiseLeftB() {
		sCInterface.raiseLeftB();
	}
	
	public synchronized void raiseRightB() {
		sCInterface.raiseRightB();
	}
	
	public synchronized void raiseMiddleB() {
		sCInterface.raiseMiddleB();
	}
	
	public synchronized void raiseRecodeB() {
		sCInterface.raiseRecodeB();
	}
	
	public synchronized boolean isRaisedDoStart() {
		return sCInterface.isRaisedDoStart();
	}
	
	public synchronized boolean isRaisedDoStop() {
		return sCInterface.isRaisedDoStop();
	}
	
	public synchronized boolean isRaisedDoPause() {
		return sCInterface.isRaisedDoPause();
	}
	
	public synchronized boolean isRaisedInit() {
		return sCInterface.isRaisedInit();
	}
	
	public synchronized boolean isRaisedShowTime() {
		return sCInterface.isRaisedShowTime();
	}
	
	public synchronized boolean isRaisedShowDate() {
		return sCInterface.isRaisedShowDate();
	}
	
	public synchronized boolean isRaisedRecodeTime() {
		return sCInterface.isRaisedRecodeTime();
	}
	
	public synchronized boolean isRaisedDoReset() {
		return sCInterface.isRaisedDoReset();
	}
	
	/* Entry action for state 'init'. */
	private void entryAction_time_stopWatch_r1_init() {
		sCInterface.raiseInit();
	}
	
	/* Entry action for state 'stop'. */
	private void entryAction_time_stopWatch_r1_stop() {
		sCInterface.raiseDoStop();
	}
	
	/* Entry action for state 'pause'. */
	private void entryAction_time_stopWatch_r1_pause() {
		sCInterface.raiseDoPause();
	}
	
	/* Entry action for state 'run'. */
	private void entryAction_time_stopWatch_r1_run() {
		sCInterface.raiseDoStart();
	}
	
	/* Entry action for state 'time'. */
	private void entryAction_time_time_date_r2_time() {
		timer.setTimer(this, 0, (1 * 1000), false);
		
		sCInterface.raiseShowTime();
	}
	
	/* Entry action for state 'date'. */
	private void entryAction_time_time_date_r2_date() {
		timer.setTimer(this, 1, (1 * 1000), false);
		
		sCInterface.raiseShowDate();
	}
	
	/* Entry action for state 'recodeTime'. */
	private void entryAction_recodeTime_recodeTime() {
		timer.setTimer(this, 2, (1 * 1000), false);
		
		sCInterface.raiseRecodeTime();
	}
	
	/* Exit action for state 'time'. */
	private void exitAction_time_time_date_r2_time() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'date'. */
	private void exitAction_time_time_date_r2_date() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'recodeTime'. */
	private void exitAction_recodeTime_recodeTime() {
		timer.unsetTimer(this, 2);
	}
	
	/* 'default' enter sequence for state stopWatch */
	private void enterSequence_time_stopWatch_default() {
		enterSequence_time_stopWatch_r1_default();
	}
	
	/* 'default' enter sequence for state init */
	private void enterSequence_time_stopWatch_r1_init_default() {
		entryAction_time_stopWatch_r1_init();
		nextStateIndex = 0;
		stateVector[0] = State.time_stopWatch_r1_init;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state stop */
	private void enterSequence_time_stopWatch_r1_stop_default() {
		entryAction_time_stopWatch_r1_stop();
		nextStateIndex = 0;
		stateVector[0] = State.time_stopWatch_r1_stop;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state pause */
	private void enterSequence_time_stopWatch_r1_pause_default() {
		entryAction_time_stopWatch_r1_pause();
		nextStateIndex = 0;
		stateVector[0] = State.time_stopWatch_r1_pause;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state run */
	private void enterSequence_time_stopWatch_r1_run_default() {
		entryAction_time_stopWatch_r1_run();
		nextStateIndex = 0;
		stateVector[0] = State.time_stopWatch_r1_run;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state time/date */
	private void enterSequence_time_time_date_default() {
		enterSequence_time_time_date_r2_default();
	}
	
	/* 'default' enter sequence for state time */
	private void enterSequence_time_time_date_r2_time_default() {
		entryAction_time_time_date_r2_time();
		nextStateIndex = 0;
		stateVector[0] = State.time_time_date_r2_time;
	}
	
	/* 'default' enter sequence for state date */
	private void enterSequence_time_time_date_r2_date_default() {
		entryAction_time_time_date_r2_date();
		nextStateIndex = 0;
		stateVector[0] = State.time_time_date_r2_date;
	}
	
	/* 'default' enter sequence for state recodeTime */
	private void enterSequence_recodeTime_recodeTime_default() {
		entryAction_recodeTime_recodeTime();
		nextStateIndex = 1;
		stateVector[1] = State.recodeTime_recodeTime;
	}
	
	/* 'default' enter sequence for state doNothing */
	private void enterSequence_recodeTime_doNothing_default() {
		nextStateIndex = 1;
		stateVector[1] = State.recodeTime_doNothing;
	}
	
	/* 'default' enter sequence for region time */
	private void enterSequence_time_default() {
		react_time__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_time_stopWatch_r1_default() {
		react_time_stopWatch_r1__entry_Default();
	}
	
	/* shallow enterSequence with history in child r1 */
	private void shallowEnterSequence_time_stopWatch_r1() {
		switch (historyVector[0]) {
		case time_stopWatch_r1_init:
			enterSequence_time_stopWatch_r1_init_default();
			break;
		case time_stopWatch_r1_stop:
			enterSequence_time_stopWatch_r1_stop_default();
			break;
		case time_stopWatch_r1_pause:
			enterSequence_time_stopWatch_r1_pause_default();
			break;
		case time_stopWatch_r1_run:
			enterSequence_time_stopWatch_r1_run_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_time_time_date_r2_default() {
		react_time_time_date_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region recodeTime */
	private void enterSequence_recodeTime_default() {
		react_recodeTime__entry_Default();
	}
	
	/* Default exit sequence for state stopWatch */
	private void exitSequence_time_stopWatch() {
		exitSequence_time_stopWatch_r1();
	}
	
	/* Default exit sequence for state init */
	private void exitSequence_time_stopWatch_r1_init() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state stop */
	private void exitSequence_time_stopWatch_r1_stop() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state pause */
	private void exitSequence_time_stopWatch_r1_pause() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state run */
	private void exitSequence_time_stopWatch_r1_run() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state time/date */
	private void exitSequence_time_time_date() {
		exitSequence_time_time_date_r2();
	}
	
	/* Default exit sequence for state time */
	private void exitSequence_time_time_date_r2_time() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_time_time_date_r2_time();
	}
	
	/* Default exit sequence for state date */
	private void exitSequence_time_time_date_r2_date() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_time_time_date_r2_date();
	}
	
	/* Default exit sequence for state recodeTime */
	private void exitSequence_recodeTime_recodeTime() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_recodeTime_recodeTime();
	}
	
	/* Default exit sequence for state doNothing */
	private void exitSequence_recodeTime_doNothing() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for region time */
	private void exitSequence_time() {
		switch (stateVector[0]) {
		case time_stopWatch_r1_init:
			exitSequence_time_stopWatch_r1_init();
			break;
		case time_stopWatch_r1_stop:
			exitSequence_time_stopWatch_r1_stop();
			break;
		case time_stopWatch_r1_pause:
			exitSequence_time_stopWatch_r1_pause();
			break;
		case time_stopWatch_r1_run:
			exitSequence_time_stopWatch_r1_run();
			break;
		case time_time_date_r2_time:
			exitSequence_time_time_date_r2_time();
			break;
		case time_time_date_r2_date:
			exitSequence_time_time_date_r2_date();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_time_stopWatch_r1() {
		switch (stateVector[0]) {
		case time_stopWatch_r1_init:
			exitSequence_time_stopWatch_r1_init();
			break;
		case time_stopWatch_r1_stop:
			exitSequence_time_stopWatch_r1_stop();
			break;
		case time_stopWatch_r1_pause:
			exitSequence_time_stopWatch_r1_pause();
			break;
		case time_stopWatch_r1_run:
			exitSequence_time_stopWatch_r1_run();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_time_time_date_r2() {
		switch (stateVector[0]) {
		case time_time_date_r2_time:
			exitSequence_time_time_date_r2_time();
			break;
		case time_time_date_r2_date:
			exitSequence_time_time_date_r2_date();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region recodeTime */
	private void exitSequence_recodeTime() {
		switch (stateVector[1]) {
		case recodeTime_recodeTime:
			exitSequence_recodeTime_recodeTime();
			break;
		case recodeTime_doNothing:
			exitSequence_recodeTime_doNothing();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for shallow history entry  */
	private void react_time_stopWatch_r1__entry_Default() {
		/* Enter the region with shallow history */
		if (historyVector[0] != State.$NullState$) {
			shallowEnterSequence_time_stopWatch_r1();
		} else {
			enterSequence_time_stopWatch_r1_init_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_time_time_date_r2__entry_Default() {
		enterSequence_time_time_date_r2_time_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_time__entry_Default() {
		enterSequence_time_stopWatch_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_recodeTime__entry_Default() {
		enterSequence_recodeTime_doNothing_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean time_stopWatch_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.middleB) {
				exitSequence_time_stopWatch();
				enterSequence_time_time_date_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean time_stopWatch_r1_init_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.leftB) {
				exitSequence_time_stopWatch_r1_init();
				enterSequence_time_stopWatch_r1_run_default();
				time_stopWatch_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = time_stopWatch_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean time_stopWatch_r1_stop_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.leftB) {
				exitSequence_time_stopWatch_r1_stop();
				enterSequence_time_stopWatch_r1_init_default();
				time_stopWatch_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = time_stopWatch_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean time_stopWatch_r1_pause_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.leftB) {
				exitSequence_time_stopWatch_r1_pause();
				enterSequence_time_stopWatch_r1_stop_default();
				time_stopWatch_react(false);
			} else {
				if (sCInterface.rightB) {
					exitSequence_time_stopWatch_r1_pause();
					enterSequence_time_stopWatch_r1_run_default();
					time_stopWatch_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = time_stopWatch_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean time_stopWatch_r1_run_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.leftB) {
				exitSequence_time_stopWatch_r1_run();
				enterSequence_time_stopWatch_r1_stop_default();
				time_stopWatch_react(false);
			} else {
				if (sCInterface.rightB) {
					exitSequence_time_stopWatch_r1_run();
					enterSequence_time_stopWatch_r1_pause_default();
					time_stopWatch_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = time_stopWatch_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean time_time_date_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean time_time_date_r2_time_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.middleB) {
				exitSequence_time_time_date_r2_time();
				enterSequence_time_time_date_r2_date_default();
				time_time_date_react(false);
			} else {
				if (timeEvents[0]) {
					exitSequence_time_time_date();
					react_time_stopWatch_r1__entry_Default();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = time_time_date_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean time_time_date_r2_date_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.middleB) {
				exitSequence_time_time_date_r2_date();
				enterSequence_time_time_date_r2_time_default();
				time_time_date_react(false);
			} else {
				if (timeEvents[1]) {
					exitSequence_time_time_date();
					react_time_stopWatch_r1__entry_Default();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = time_time_date_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean recodeTime_recodeTime_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.recodeB) {
				exitSequence_recodeTime_recodeTime();
				sCInterface.raiseDoReset();
				
				enterSequence_recodeTime_doNothing_default();
				react();
			} else {
				if (timeEvents[2]) {
					exitSequence_recodeTime_recodeTime();
					enterSequence_recodeTime_doNothing_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean recodeTime_doNothing_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.recodeB) {
				exitSequence_recodeTime_doNothing();
				enterSequence_recodeTime_recodeTime_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
